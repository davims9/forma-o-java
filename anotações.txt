Nessa aula introdutória já aprendemos vários assuntos fundamentais sobre Java.

Falamos sobre as principais características da linguagem Java como:

orientado a objetos
parecido com C++
muitas bibliotecas e grande comunidade
java é estaticamente e fortemente tipada (quer dizer que a variavel precisa ser declarada todas as vezes informando o tipo)
Além disso, aprendemos:

a diferença entre o código fonte e o Bytecode
para executar o Bytecode é preciso ter a máquina virtual java
o Bytecode é independente do sistema operacional
Vimos também os principais componentes da plataforma Java que são:

Java Virtual Machine (JVM)
linguagem Java
Bibliotecas Java (API)
Na próxima aula já vamos escrever o primeiro código Java! Vamos continuar?

tem que ir em variaveis de ambiente, nas configurações avançadas do sistema, para por o caminho da pasta BIN do JDK dentro do PATH

O JDK são as ferramentas de desenvolvimento (como o compilador) mas também tem JRE embutido!
o JRE (Java Runtime Environment) é apenas para executar o Bytecode. Caso queira executar uma aplicação Java apenas, basta o JRE (Java Runtime Environment).

O mundo Java é cheio de siglas com 3 ou 4 letras começando com J. Você já conhece duas famosas: o JRE e JDK. O primeiro é o ambiente de execução, o segundo são as ferramentas de desenvolvimento junto com o ambiente de execução. Simplificando podemos dizer:

JDK = JRE + ferramentas de desenvolvimentoCOPIAR CÓDIGO
Existe uma terceira sigla, JVM (Java Virtual Machine), que também já usamos durante o curso. A responsabilidade da Java Virtual Machine é executar o Bytecode! Então qual é diferença entre JVM e JRE? Ambos executam o Bytecode, certo?

A resposta é simples: O JRE (o nosso ambiente de execução) contém a JVM, mas também possui um monte de bibliotecas embutidas. Ou seja, para rodar uma aplicação Java não basta ter apenas a JVM, também é preciso ter as bibliotecas.

Assim podemos simplificar e dizer:

JRE = JVM + bibliotecasCOPIAR CÓDIGO
É importante entender que você não pode baixar a JVM apenas. Você sempre baixa o JRE que tem a JVM e as bibliotecas em conjunto.

C:\Users\Davi Moura\OneDrive\Documentos\aulas\Alura\formação java>type olaMundo.java
public class olaMundo{
    public static void main(String[] args){
        System.out.println("ola mundo");
    }
}
C:\Users\Davi Moura\OneDrive\Documentos\aulas\Alura\formação java>javac olaMundo.java

C:\Users\Davi Moura\OneDrive\Documentos\aulas\Alura\formação java>java olaMundo.java
ola mundo

C:\Users\Davi Moura\OneDrive\Documentos\aulas\Alura\formação java>java olaMundo.class
Error: Could not find or load main class olaMundo.class
Caused by: java.lang.ClassNotFoundException: olaMundo.class

C:\Users\Davi Moura\OneDrive\Documentos\aulas\Alura\formação java>olaMundo.class

C:\Users\Davi Moura\OneDrive\Documentos\aulas\Alura\formação java>java olaMundo.class
Error: Could not find or load main class olaMundo.class
Caused by: java.lang.ClassNotFoundException: olaMundo.class

C:\Users\Davi Moura\OneDrive\Documentos\aulas\Alura\formação java>java olaMundo.java
ola mundo

C:\Users\Davi Moura\OneDrive\Documentos\aulas\Alura\formação java>java olaMundo
ola mundo

--> POO: paradigma da orientação a objetos, que é criar unidades de código que combinem os dados associados a determinada informação com as funcionalidades aplicadas aqueles dados (por exemplo, CPF + validação). São os atributos e métodos.

